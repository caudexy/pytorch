[[linter]]
name = 'FLAKE8'
include_patterns = ['**/*.py']
exclude_patterns = [
    '.git/**',
    'build_code_analyzer',
    'build_test_custom_build/**',
    'build/**',
    'caffe2/**',
    'docs/caffe2/**',
    'docs/cpp/src/**',
    'docs/src/**',
    'scripts/**',
    'test/generated_type_hints_smoketest.py',
    'third_party/**',
    'torch/include/**',
    'torch/lib/**',
    'venv/**',
    '**/*.pyi',
]
args = [
    'python3',
    'tools/linter/adapters/flake8_linter.py',
    '--binary=flake8',
    '--',
    '@{{PATHSFILE}}'
]
init_args = [
    'python3',
    'tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'flake8==3.8.2',
    'flake8-bugbear==20.1.4',
    'flake8-comprehensions==3.3.0',
    'flake8-executable==2.0.4',
    'flake8-pyi==20.5.0',
    'mccabe==0.6.1',
    'pycodestyle==2.6.0',
    'pyflakes==2.2.0',
]


[[linter]]
name = 'CLANGFORMAT'
include_patterns = [
    'c10/**/*.h',
    'c10/**/*.cpp',
    'torch/csrc/jit/**/*.h',
    'torch/csrc/jit/**/*.cpp',
    'torch/csrc/deploy/**/*.h',
    'torch/csrc/deploy/**/*.cpp',
    'test/cpp/jit/**/*.h',
    'test/cpp/jit/**/*.cpp',
    'test/cpp/tensorexpr/**/*.h',
    'test/cpp/tensorexpr/**/*.cpp',
]
exclude_patterns = []
args = [
    'python3',
    'tools/linter/adapters/clangformat_linter.py',
    '--binary=clang-format',
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
name = 'MYPY'
include_patterns = ['**/*.py']
exclude_patterns = []
args = [
    'python3',
    'tools/linter/adapters/mypy_linter.py',
    '--binary=mypy',
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
name = 'CLANGTIDY'
include_patterns = ['**/*.cpp']
exclude_patterns = []
init_args = [
    'python3',
    'tools/linter/adapters/clangtidy_init.py',
    '--dry_run={{DRYRUN}}',
    '--output_dir=.clang-tidy-bin',
    '--output_name=clang-tidy',
]
args = [
    'python3',
    'tools/linter/adapters/clangtidy_linter.py',
    '--binary=.clang-tidy-bin/clang-tidy',
    '--build_dir=./build',
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
name = 'TYPEIGNORE'
include_patterns = ['**/*.py', '**/*.pyi']
exclude_patterns = ['test/test_jit.py']
args = [
    'python3',
    'tools/linter/adapters/grep_linter.py',
    '--pattern=# type:\s*ignore(?!\[)',
    '--linter_name=TYPEIGNORE',
    '--error_name=unqualified type: ignore',
    """--error_description=\
        This line has an unqualified `type: ignore`; \
        please convert it to `type: ignore[xxxx]`\
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
name = 'NOQA'
include_patterns = ['**/*.py', '**/*.pyi']
exclude_patterns = ['caffe2/**']
args = [
    'python3',
    'tools/linter/adapters/grep_linter.py',
    '--pattern=# type:\s*ignore(?!\[)',
    '--linter_name=TYPEIGNORE',
    '--error_name=unqualified noqa',
    """--error_description=\
        This line has an unqualified `noqa`; \
        please convert it to `noqa: XXXX`\
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
name = 'CIRCLECI'
include_patterns=['.circleci/**']
args = [
    'python3',
    'tools/linter/adapters/circleci_linter.py',
    '--regen-script-working-dir=.circleci',
    '--config-yml=.circleci/config.yml',
    '--regen-script=generate_config_yml.py',
]
bypass_matched_file_filter = true

[[linter]]
name = 'NATIVEFUNCTIONS'
include_patterns=['aten/src/ATen/native/native_functions.yaml']
args = [
    'python3',
    'tools/linter/adapters/nativefunctions_linter.py',
    '--native-functions-yml=aten/src/ATen/native/native_functions.yaml',
]
init_args = [
    'python3',
    'tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'ruamel.yaml==0.17.4',
]
bypass_matched_file_filter = true

[[linter]]
name = 'NEWLINE'
include_patterns=['**']
exclude_patterns=[
    '**/contrib/**',
    'third_party/**',
    '**/*.expect',
    '**/*.ipynb',
    'tools/clang_format_hash/**',
]
args = [
    'python3',
    'tools/linter/adapters/newlines_linter.py',
    '--',
    '@{{PATHSFILE}}',
]
